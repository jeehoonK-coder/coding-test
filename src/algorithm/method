Arrays.sort(배열); //배열 정렬 오름차순
Arrays.sort(배열, Collections.reverseOrder()); //배열 정렬 내림차순 (T타입)

list.sort(Comparator.naturalOrder()); // 리스트 오름차순
list.sort(Comparator.reverseOrder()); // 리스트 내림차순

List<Integer>[] map = new List[N]; // 배열안에 리스트
ex) List<int[]>[] ArrayList = new List[N+1];

Deque<Integer> deque = new ArrayDeque<>(); // 큐와 스텍을 합친 것, 덱 (No.3190)

//hashmap을 foreach쓰는 법 (No.14725)
HashMap.forEach((strKey, strValue) -> {
            System.out.println(strKey);
            if(!strValue.end){
                print(strValue, cnt+1);
            }
        });

*우선순위 큐
//낮은 숫자가 우선 순위인 int 형 우선순위 큐 선언
PriorityQueue<Integer> priorityQueue = new PriorityQueue<Integer>();
//높은 숫자가 우선 순위인 int 형 우선순위 큐 선언
PriorityQueue<Integer> priorityQueueHighest = new PriorityQueue<>(Collections.reverseOrder());

*BFS, DFS
간선의 숫자가 N^2보다 적다면 인접행력보다는 인접연결 리스트를 사용하는것이 메모리적으로 이득
ex) ArrayList<ArrayList<Integer>> graph = new ArrayList<>();
cf) 모든좌표를 순서대로 하나씩 찾아보면서 DFS를 돌리는 상황에서 사용한다. No.17136 , No.2580

*벨만-포드 (No.1865)
- 그래프 최단 경로를 구하는 알고리즘
- 하나의 정점에서 출발하는 최단 거리를 구함
- 음수 사이클이 없어야함(음수 가중치 허용)
- O(nm)시간 복잡도 가짐
-> 음수 가중치가 있는 경로에서는 벨만-포드알고리즘을 사용
-> 음수 사이클을 찾을 수 있는 기능을 가짐 ( N번째 사이클에서 dist에 변화가 있으면 음수 사이클이 존재 )

*LIS (Longest Increasing Subsequence)
- DP (N^2) - 전에 DP들을 다 찾아보는 방법 모든 원소들을 다 찾아보기때문에 시간이 오래걸린다.
- Binary Search (nlogn)
    -> L배열을 만드는 것은 구성요소를 구하는 것은 아니고 최대길이만 구하는 것 (L배열의 lowerbound를 대체해준다)
    -> P배열을 만드는 것이 구성요소도 함께 구하는 것 (L배열에서 자신의 인덱스를 저장하는 P배열을 만들고 P배열에서 처음으로 3,2,1...인덱스가 나온것을 구한다) No.14003
    cf) https://seungkwan.tistory.com/8

* 이분탐색
- =과 -1에 대한 기준을 잘 모르겠다

* List 정렬 커스텀
- Collections.sort(list,new Comparator(){
            //o1 - o2 = ASC(오름차순) , o2 - o1 = DESC(내림차순)
  			@Override
  			public int compare(Object o1, Object o2) {
  				// TODO Auto-generated method stub
  				if(o1.age == o2.age){
  					return o2.name.compareTo(o1.name);
  				}
  				return o1.age - o2.age;
  			}
  		});



* 트라이 문자열
- static class Node {
        Map<Character, Node> childNode;
        boolean endOfword;

        Node(Map<Character, Node> childNode, boolean endOfword){
            this.childNode = childNode;
            this.endOfword = endOfword;
        }
  }
- ex) https://codingnojam.tistory.com/40

* EOF (end of file)
- Scanner.hasNext()
- BufferReader.readLine() != null 백준 제출 기준 (IDE에서 돌릴때에는 br.readLine().equals("") 사용)

* 재귀나 백트래킹을 돌릴때 배열같은 변수에 관하여
- 배열은 clone을 통해서 복사한다. (2차원일경우 for문을 이용하여 한줄씩 복사한다) -> clone을 통해서 복사할경우 원본을 바꿔도 바뀌지 않는다. (배열만 가능!)
- visited[]같은경우 true로 진행한다음 false로 바꾸면 가능하다.


* 소수 구하기 (에라토스테네스의 체) No.1644
- 소수를 구하는 방법 중에 하나
- 2부터 시작하여 자신의 배수가 되는 수를 지워나가는 방법. i*i <= N 범위안에 있는 i만큼만 지우면 된다. (2부터 시작하여 2의배수들 4,6,8...을 다 지우고 그다음에 3의 배수들 6,9,12를 지우는 방식)


String 대소 비교 (compareTo)